# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if len(lists) == 1:
            return lists.pop()
        if not lists:
            return
    
        def mergeTwoLists(list1,list2):
            if not list1:
                return list2
            if not list2:
                return list1
            
            if list1.val < list2.val:
                next_val = list1.next
                list1.next = mergeTwoLists(next_val,list2)
                return list1
            else:
                next_val = list2.next
                list2.next = mergeTwoLists(list1,next_val)
                return list2
        
        # merged = lists[0]
        # for i in range(1,len(lists)):
        #     merged = mergeTwoLists(merged,lists[i])
        # return merged

        mid = len(lists)//2
        l,r = self.mergeKLists(lists[:mid]), self.mergeKLists(lists[mid:])
        return mergeTwoLists(l,r)
        